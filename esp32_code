#include <ESP32Servo.h>
#include <LiquidCrystal_I2C.h>
#include <ESP32Firebase.h>
#include <WiFi.h>

#define t1_trigger 32
#define t1_echo 2
#define t2_trigger 16
#define t2_echo 17
#define t3_trigger 5
#define t3_echo 18
#define t4_trigger 12
#define t4_echo 14
#define t5_trigger 27
#define t5_echo 26

#define WIFI_SSID "Wokwi-GUEST"
#define WIFI_PASSWORD ""
#define REFERENCE_URL "https://esp-8622-c27e0-default-rtdb.firebaseio.com/"

Firebase firebase(REFERENCE_URL);
Servo myservo;
LiquidCrystal_I2C lcd(0x27, 16, 2); // Adjust the I2C address according to your LCD module

int distanceThreshold = 100;
int parkingAvailable = 3;
int barrierState = 0;
String p0;
String p1;
String p2;
int number=0;
// Function prototype
void sendData(String p0, String p1, String p2);

void setup() {
    Serial.begin(9600);
    lcd.init(); // Initialize the LCD
    lcd.backlight(); // Turn on the backlight
    myservo.attach(33);
    myservo.write(90);

    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);

    Serial.println();
    Serial.println();
    Serial.print("Connecting to: ");
    Serial.println(WIFI_SSID);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print("-");
    }

    Serial.println("");
    Serial.println("WiFi Connected");

    Serial.print("IP Address: ");
    Serial.print("http://");
    Serial.print(WiFi.localIP());
    Serial.println("/");

    pinMode(13, OUTPUT);
    pinMode(15, OUTPUT);
    pinMode(4, OUTPUT);

    // Initialize pin states
    digitalWrite(13, LOW);
    digitalWrite(15, LOW);
    digitalWrite(4, LOW);

    String data1 = firebase.getString("/book/Place A0");
    Serial.println(data1);
}

void sendData(String p0, String p1, String p2) {
    // Ensure that these variables are updated globally
    ::p0 = p0;
    ::p1 = p1;
    ::p2 = p2;
}
long readDistance(int triggerPin, int echoPin) {
    pinMode(triggerPin, OUTPUT);
    digitalWrite(triggerPin, LOW);
    delayMicroseconds(2);
    digitalWrite(triggerPin, HIGH);
    delayMicroseconds(2);
    digitalWrite(triggerPin, LOW);
    pinMode(echoPin, INPUT);
    return pulseIn(echoPin, HIGH);
    
}

void loop() {
   
    float d1 = 0.1723 * readDistance(t1_trigger, t1_echo);
    float d2 = 0.1723 * readDistance(t2_trigger, t2_echo);
    float d3 = 0.1723 * readDistance(t3_trigger, t3_echo);
    float d4 = 0.1723 * readDistance(t4_trigger, t4_echo);
    float d5 = 0.1723 * readDistance(t5_trigger, t5_echo);

    Serial.println("d1 = " + String(d1) + "cm");
    Serial.println("d2 = " + String(d2) + "cm");
    Serial.println("d3 = " + String(d3) + "cm");
    Serial.println("d4 = " + String(d4) + "cm");
    Serial.println("d5 = " + String(d5) + "cm");
    Serial.println(p0);
    Serial.println(p1);
    Serial.println(p2);

   
    if (barrierState == 0) {
        if (d4 < 100 && d5 >= 100 && parkingAvailable > 0) {
            parkingAvailable -= 1;
            barrierState = -1;
            myservo.write(90);
        }
        if (d4 >= 100 && d5 < 100) {
            parkingAvailable += 1;
            barrierState = 1;
            myservo.write(90);
        }
    } else if (barrierState == -1) {
        if (d4 >= 100 && d5 < 100) {
            barrierState = -2;
            myservo.write(0);
        }
    } else if (barrierState == 1) {
        if (d5 >= 100 && d4 < 100) {
            barrierState = 2;
            myservo.write(0);
        }
    } else if (barrierState == -2) {
        if (d5 >= 100) {
            barrierState = 0;
        }
    } else if (barrierState == 2) {
        if (d4 >= 100) {
            barrierState = 0;
        }
    } if (d4 >= 100 && d5 >= 100) {
            myservo.write(0);
        }


    lcd.setCursor(0, 0);
    if (parkingAvailable == 0) {
        lcd.print("Parking Full  ");
        delay(20);
    } else {
        lcd.print("Parking left ");
                delay(20);

        lcd.print(parkingAvailable);
    }

    if (d1 > 100 && d2 > 100 && d3 > 100) {
        parkingAvailable = 3;
        lcd.setCursor(0, 1);
        lcd.print("Slot 1 2 3 Free");
                delay(20);

        sendData("true", "true", "true");
    } else if ((d1 > 100 && d2 > 100) || (d2 > 100 && d3 > 100) || (d3 > 100 && d1 > 100)) {
        lcd.setCursor(0, 1);
        if (d1 > 100 && d2 > 100) {
            lcd.print("Slot 1 & 2 Free");
                    delay(20);

            sendData("true", "true", "false");
        } else if (d1 > 100 && d3 > 100) {
            lcd.print("Slot 1 & 3 Free");
                    delay(20);

            sendData("true", "false", "true");
        } else {
            lcd.print("Slot 2 & 3 Free");
                    delay(20);

            sendData("false", "true", "true");
        }
        parkingAvailable = 2;
    } else if (d1 < 100 && d2 < 100 && d3 < 100) {
        lcd.setCursor(0, 1);
        lcd.print("Parking Full   ");
        sendData("false", "false", "false");
                delay(20);

        parkingAvailable = 0;
    } else if ((d1 < 100 && d2 < 100) || (d2 < 100 && d3 < 100) || (d3 < 100 && d1 < 100)) {
        lcd.setCursor(0, 1);
        parkingAvailable = 1;
        if (d1 > 100) {
            lcd.print("Slot 1 is Free ");
                    delay(20);

            sendData("true", "false", "false");
        } else if (d2 > 100) {
            lcd.print("Slot 2 is Free ");
                    delay(20);

            sendData("false", "true", "false");
        } else {
            lcd.print("Slot 3 is Free ");
                    delay(20);

            sendData("false", "false", "true");
        }
    }
     if (number % 100 == 0){ 
          Serial.println("sending data");
                  lcd.setCursor(0, 1);

            lcd.print("sending data");

      firebase.setString("places/place1", p0);
    firebase.setString("places/place2", p1);
    firebase.setString("places/place3", p2);
              Serial.println("sending done");

}

number=number+1;
}
   
